package taiji.org.donkeymgr.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import taiji.org.donkeymgr.dao.UploadImageInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UPLOAD_IMAGE_INFO".
*/
public class UploadImageInfoDao extends AbstractDao<UploadImageInfo, Long> {

    public static final String TABLENAME = "UPLOAD_IMAGE_INFO";

    /**
     * Properties of entity UploadImageInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Donkeyid = new Property(1, long.class, "donkeyid", false, "DONKEYID");
        public final static Property Idonserver = new Property(2, long.class, "idonserver", false, "IDONSERVER");
        public final static Property Localimagepath = new Property(3, String.class, "localimagepath", false, "LOCALIMAGEPATH");
        public final static Property Url = new Property(4, String.class, "url", false, "URL");
    };


    public UploadImageInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UploadImageInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_IMAGE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DONKEYID\" INTEGER NOT NULL ," + // 1: donkeyid
                "\"IDONSERVER\" INTEGER NOT NULL ," + // 2: idonserver
                "\"LOCALIMAGEPATH\" TEXT NOT NULL ," + // 3: localimagepath
                "\"URL\" TEXT NOT NULL );"); // 4: url
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_UPLOAD_IMAGE_INFO_DONKEYID ON UPLOAD_IMAGE_INFO" +
                " (\"DONKEYID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_IMAGE_INFO\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UploadImageInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDonkeyid());
        stmt.bindLong(3, entity.getIdonserver());
        stmt.bindString(4, entity.getLocalimagepath());
        stmt.bindString(5, entity.getUrl());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UploadImageInfo readEntity(Cursor cursor, int offset) {
        UploadImageInfo entity = new UploadImageInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // donkeyid
            cursor.getLong(offset + 2), // idonserver
            cursor.getString(offset + 3), // localimagepath
            cursor.getString(offset + 4) // url
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UploadImageInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDonkeyid(cursor.getLong(offset + 1));
        entity.setIdonserver(cursor.getLong(offset + 2));
        entity.setLocalimagepath(cursor.getString(offset + 3));
        entity.setUrl(cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UploadImageInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UploadImageInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
